{"pages":[],"posts":[{"title":"Android-Studio使用阿里云镜像解决依赖下载慢的问题","text":"使用阿里云的镜像替换默认的镜像国内由于众所周知的原因导致Android Studio依赖下载过慢，使用阿里云的镜像能够有效解决这个问题 1234567891011121314151617181920212223242526buildscript { repositories { maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'} google() jcenter() } dependencies { classpath 'com.android.tools.build:gradle:3.5.2' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files }}allprojects { repositories { maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'} google() jcenter() }}task clean(type: Delete) { delete rootProject.buildDir}","link":"/2019/12/12/Android-Studio%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E4%B8%8B%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"Hexo博客更新主题后上传Git操作","text":"从GitHub上克隆主题(以next主题为例)在根目录下右键git bush here，输入： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 在站点配置文件（_config.yml） 中将主题改为新增主题1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 进入主题目录，更新git1cd themes/next 1git pull 执行更新1hexo clean 1hexo g 1hexo s 测试网址输入网址 http://localhost:4000 查看主题是否已更新，正常即可输入： 1hexo d 完成部署，然后打开个人域名网址即可。","link":"/2019/09/19/Hexo%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98%E5%90%8E%E4%B8%8A%E4%BC%A0Git%E6%93%8D%E4%BD%9C/"},{"title":"Java中static作用及用法详解","text":"1. 概述在程序中任何变量或者代码都是在编译时由系统自动分配内存来存储的，而所谓静态就是指在编译后所分配的内存会一直存在，直到程序退出内存才会释放这个空间，也就是只要程序在运行，那么这块内存就会一直存在。在Java程序里面，所有的东西都是对象，而对象的抽象就是类，对于一个类而言，如果要使用他的成员，那么普通情况下必须先实例化对象后，通过对象的引用才能够访问这些成员，但是用static修饰的成员可以通过**类名加 “.” **进行直接访问。 被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 2. 定义和使用格式类变量当 static 修饰成员变量时，该变量称为类变量（没被修饰的变量称为实例变量）。该类的每个对象都共享同一个类变量的值。任何对象都可以更改该类变量的值，但也可以在不创建该类的对象的情况下对类变量进行操作。 定义格式： 1static 数据类型 变量名; 举例： 1static String name; 比如说，基础班新班开班，学员报到。现在想为每一位新来报到的同学编学号（id），从第一名同学开始，id为1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关。 所以，我们可以这样定义一个静态变量numberOfStudent，代码如下： 123456789101112131415161718192021222324252627282930313233public class Student { private String name; private int age; // 学生的id private int id; // 类变量，记录学生数量，分配学号，初始化为0 public static int numberOfStudent = 0; public Student(String name, int age){ this.name = name; this.age = age; // 通过 numberOfStudent 给学生分配学号 this.id = ++numberOfStudent; } // 打印属性值 public void show(){ System.out.println(&quot;Student : name=&quot; + name + &quot;, age=&quot; + age + &quot;, sid=&quot; + id); }}public class StuDemo { public static void main(String[] args) { Student s1 = new Student(&quot;张三&quot;, 23); Student s2 = new Student(&quot;李四&quot;, 24); Student s3 = new Student(&quot;王五&quot;, 25); Student s4 = new Student(&quot;赵六&quot;, 26); s1.show(); // Student : name=张三, age=23, sid=1 s2.show(); // Student : name=李四, age=24, sid=2 s3.show(); // Student : name=王五, age=25, sid=3 s4.show(); // Student : name=赵六, age=26, sid=4 }} 静态方法当 static 修饰成员方法时，该方法称为类方法 。静态方法在声明中有 static ，建议直接使用类名来调用，而不需要创建类的对象。调用方式非常简单。 定义格式： 123修饰符 static 返回值类型 方法名 (参数列表){ // 执行语句} 举例：在Student类中定义静态方法 123public static void showNum() { System.out.println(&quot;num:&quot; + numberOfStudent);} 静态方法调用的注意事项： 静态方法可以直接访问类变量和静态方法。 静态方法不能直接访问普通成员变量或成员方法。但是，成员方法可以直接访问类变量或静态方法。 静态方法中，不能使用this或super关键字。 小贴士：静态方法只能访问静态成员 调用格式被static修饰的成员可以并且建议通过类名直接访问。虽然也可以通过对象名访问静态成员，原因即多个对象均属于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息。 格式： 12345// 访问类变量类名.类变量名； // 调用静态方法类名.静态方法名(参数)； 调用演示： 12345678public class StuDemo2 { public static void main(String[] args) { // 访问类变量 System.out.println(Student.numberOfStudent); // 调用静态方法 Student.showNum(); }} 3. 静态代码块static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。 格式： 12345public class test { static { //执行语句 }} 作用：给类变量进行初始化赋值。用法演示，代码如下： 12345678910111213public class Game { public static int number; public static ArrayList&lt;String&gt; list; static { // 给类变量赋值 number = 2; list = new ArrayList&lt;String&gt;(); // 添加元素到集合中 list.add(&quot;张三&quot;); list.add(&quot;李四&quot;); }} 4. 总结有时你希望定义一个类成员，使它的使用完全独立于该类的任何对象。通常情况下，类成员必须通过它的类的对象访问，但是可以创建这样一个成员，它能够被它自己使用，而不必引用特定的实例。在成员的声明前面加上关键字static就能创建这样的成员。如果一个成员被声明为static，它就能够在它的类的任何对象创建之前被访问，而不必引用任何对象。你可以将方法和变量都声明为static。static 成员的最常见的例子是main( ) 。因为在程序开始执行时必须调用main() ，所以它被声明为static。 static 关键字，可以修饰变量、方法和代码块。在使用的过程中，其主要目的还是想在不创建对象的情况下，去调用方法。","link":"/2020/07/26/Java%E4%B8%ADstatic%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"},{"title":"博客自定义域名教程","text":"我的博客是托管在Github Pages上，默认的域名便是 yourname.github.io ，如何将域名变得更简单和更有个性呢，这就是自定义域名。我在阿里云上买了一个 .top 为后缀的域名，目前完整域名为 lazypie.top 。看起来还是比默认的 github.io 域名舒服的呀，接下来就讲讲设置自定义域名的步骤。 域名控制台设置购买域名可选择的网站很多，由于我是在阿里云购买的，这里拿阿里云举例。购买完你的域名和认证完成后，进入域名控制台，选择操作中的解析: 点击添加记录，记录类型选择 CNAME ，主机记录填写 www ，解析线路 默认 ，记录值填写 yourname.github.io (这里是你原来的博客域名)，TTL填写 10分钟 ： 重复以上步骤再添加一条记录，主机记录改为 @ ，其他不变，最后如图下： Github设置打开GitHub，进入你托管博客的仓库页面，点击设置： 往下滑找到Github Pages板块，在Custom domain下面的输入框输入你的自定义域名后点击save保存： 到这里你应该可以用你的自定义域名打开你的博客页面了，但是将来重新部署后可能又会打不开，这时候就要看下面的设置了。 适用于GitHub仓库里丢失了CNAME文件和博客根目录/source下丢失CNAME文件 添加CNAME文件打开GitHub，进入你托管博客的仓库页面，点击 Create new file : 输入你的自定义域名后划到下面点击 Commit new file 提交文件: 接下来打开你的博客根目录/source，新建一个名为 CNAME 的文件，在里面输入你的自定义域名（新建一个txt文档，输入完后重命名文件删掉文件后缀名即可）： 如果你使用的是mac系统，则可以通过终端新建一个无后缀的文件 12# 在source目录下echo [你的域名] &gt; CNAME 到这里就完成自定义域名啦，大概等一小会就ok了。","link":"/2019/09/19/%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Android Studio","slug":"Android-Studio","link":"/tags/Android-Studio/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"}],"categories":[{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"博客相关","slug":"博客相关","link":"/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"},{"name":"Java基础","slug":"Java基础","link":"/categories/Java%E5%9F%BA%E7%A1%80/"}]}